<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:c="http://www.springframework.org/schema/c"
       xmlns:p="http://www.springframework.org/schema/p" xmlns:core="http://activemq.apache.org/schema/core"
       xmlns:spring="http://camel.apache.org/schema/spring"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
       http://www.springframework.org/schema/beans/spring-beans.xsd
       http://www.springframework.org/schema/context
       http://www.springframework.org/schema/context/spring-context.xsd http://activemq.apache.org/schema/core http://activemq.apache.org/schema/core/activemq-core.xsd http://camel.apache.org/schema/spring http://camel.apache.org/schema/spring/camel-spring.xsd">
    <bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource">
        <property name="driverClassName" value="${driver}"/>
        <property name="url"
                  value="${url}"/>
        <property name="username" value="${username}"/>
        <property name="password" value="${password}"/>
        <!-- 配置初始化大小、最小、最大连接数 -->
        <property name="initialSize" value="${initialSize}"/>
        <property name="minIdle" value="${minIdle}"/>
        <property name="maxActive" value="${maxActive}"/>
        <!-- 配置获取连接等待超时的时间 -->
        <!--连接线程等待连接-->
        <property name="maxWait" value="${maxWait}"/>
        <!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->
        <property name="timeBetweenEvictionRunsMillis" value="${timeBetweenEvictionRunsMillis}"/>
        <!-- 配置一个连接在池中最小生存的时间，单位是毫秒 -->
        <property name="minEvictableIdleTimeMillis" value="${minEvictableIdleTimeMillis}"/>
        <!-- 打开PSCache，并且指定每个连接上PSCache的大小 -->
        <property name="poolPreparedStatements" value="${poolPreparedStatements}"/>
        <property name="maxPoolPreparedStatementPerConnectionSize"
                  value="${maxPoolPreparedStatementPerConnectionSize}"/>
    </bean>
    <bean id="transactionManager"
          class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="dataSource"/>
    </bean>
    <bean id="jdbcTemplate" class="org.springframework.jdbc.core.JdbcTemplate">
        <property name="dataSource" ref="dataSource"/>
    </bean>
    <bean id="tweetDao" class="core.DAO.Impl.TweetDaoImpl">
        <property name="jdbcTemplate" ref="jdbcTemplate"/>
    </bean>
    <bean id="topicDao" class="core.DAO.Impl.TopicDaoImpl">
        <property name="jdbcTemplate" ref="jdbcTemplate"/>
    </bean>
    <bean id="userDao" class="core.DAO.Impl.UserDaoImpl">
        <property name="jdbcTemplate" ref="jdbcTemplate"/>
    </bean>
    <bean id="personDao" class="core.DAO.Impl.PersonTrendImpl">
        <property name="jdbcTemplate" ref="jdbcTemplate"/>
    </bean>
    <bean id="placeDao" class="core.DAO.Impl.PlaceTrendImpl">
        <property name="jdbcTemplate" ref="jdbcTemplate"/>
    </bean>
    <context:property-placeholder location="jdbc.properties"/>
    <!-- 配置JMS连接工厂 -->
    <bean id="connectionFactory" class="org.apache.activemq.ActiveMQConnectionFactory">
        <property name="brokerURL" value="failover:(tcp://localhost:61616)"/>
    </bean>
    <!--<amq:queue id="queue" physicalName=""/>-->
    <!-- 定义消息队列（Queue） -->
    <bean id="queueDestination" class="org.apache.activemq.command.ActiveMQQueue">
        <property name="physicalName" value="tweet"/>
    </bean>
    <bean id="messageConverter" class="org.springframework.jms.support.converter.MappingJackson2MessageConverter"/>
    <bean id="jmsTemplate"
          class="org.springframework.jms.core.JmsTemplate"
          c:_0-ref="connectionFactory"
          p:defaultDestination-ref="queueDestination"
          p:messageConverter-ref="messageConverter"/>
    <!-- 配置消息队列监听者（Queue） -->
    <!--<bean id="consumerMessageListener" class="web.websocket.ConsumerMessageListener"/>-->

    <!-- 消息监听容器（Queue），配置连接工厂，监听的队列是core.service.queue"，监听器是上面定义的监听器 -->
    <!--<bean id="jmsContainer" class="org.springframework.jms.listener.DefaultMessageListenerContainer">-->
    <!--<property name="connectionFactory" ref="connectionFactory"/>-->
    <!--<property name="destination" ref="queueDestination"/>-->
    <!--<property name="messageListener" ref="consumerMessageListener"/>-->
    <!--</bean>-->
</beans>